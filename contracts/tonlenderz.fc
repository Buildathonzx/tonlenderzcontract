#include "imports/stdlib.fc";

int interest_rate;
int loan_duration;
int total_lent;
int total_borrowed;

const int op::deposit = 3;
const int op::withdraw = 4;
const int op::transfer = 5;

() handle_deposit(slice sender_address, int amount) impure {
    // Process deposit
    total_lent += amount;
}

() handle_withdraw(slice sender_address, int amount) impure {
    // Process withdrawal
    require(total_borrowed >= amount, "Insufficient funds");
    total_borrowed -= amount;
    // Send TON to sender
    send_tons(sender_address, amount);
}

() handle_transfer(slice from_address, slice to_address, int amount) impure {
    // Process transfer between users
    require(total_lent >= amount, "Insufficient balance");
    // Update balances
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    ;; Check if the message value is greater than zero
    if (msg_value > 0) {
        ;; Process the message
        ;; For example, you could add the message value to the balance
        my_balance += msg_value;
    }

    ;; Check if the message body is empty
    if (in_msg_body.len() == 0) {
        ;; If the message body is empty, return
        return ();
    }

    ;; Read operation type from message body
    int op = in_msg_body~load_uint(32);

    if (op == 1) {
        ;; Lend operation
        total_lent += msg_value;
    } else if (op == 2) {
        ;; Borrow operation
        total_borrowed += msg_value;
    } else if (op == op::deposit) {
        handle_deposit(sender_address, msg_value);
    } elseif (op == op::withdraw) {
        handle_withdraw(sender_address, in_msg_body~load_uint(64));
    } elseif (op == op::transfer) {
        slice to_address = in_msg_body~load_msg_addr();
        handle_transfer(sender_address, to_address, in_msg_body~load_uint(64));
    }
}

int get_interest_rate() method_id {
    return interest_rate;
}

int get_loan_duration() method_id {
    return loan_duration;
}

int get_total_lent() method_id {
    return total_lent;
}

int get_total_borrowed() method_id {
    return total_borrowed;
}


